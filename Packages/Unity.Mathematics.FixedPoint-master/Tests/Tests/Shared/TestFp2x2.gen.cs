//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.FixedPoint.fpmath;
using static Unity.Mathematics.math;

namespace Unity.Mathematics.FixedPoint.Tests
{
    [TestFixture]
    public class TestFp2x2
    {
        [Test]
        public static void fp2x2_zero()
        {
            TestUtils.AreEqual(fp2x2.zero.c0.x, (fp)0);
            TestUtils.AreEqual(fp2x2.zero.c0.y, (fp)0);
            TestUtils.AreEqual(fp2x2.zero.c1.x, (fp)0);
            TestUtils.AreEqual(fp2x2.zero.c1.y, (fp)0);
        }

        [Test]
        public static void fp2x2_identity()
        {
            TestUtils.AreEqual(fp2x2.identity.c0.x, (fp)1);
            TestUtils.AreEqual(fp2x2.identity.c0.y, (fp)0);
            TestUtils.AreEqual(fp2x2.identity.c1.x, (fp)0);
            TestUtils.AreEqual(fp2x2.identity.c1.y, (fp)1);
        }

        [Test]
        public static void fp2x2_operator_equal_wide_wide()
        {
            fp2x2 a0 = fp2x2(-135.18924m, -49.0941162m, 169.129822m, 240.8053m);
            fp2x2 b0 = fp2x2(-220.014648m, 66.98004m, 499.2016m, -371.1131m);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp2x2 a1 = fp2x2(314.7392m, 442.393m, 177.924438m, 335.5334m);
            fp2x2 b1 = fp2x2(208.448669m, 390.8037m, -72.44382m, 362.97644m);
            bool2x2 r1 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp2x2 a2 = fp2x2(168.15448m, 350.729553m, 367.178467m, 46.9414673m);
            fp2x2 b2 = fp2x2(194.678345m, 471.644836m, -404.044678m, -144.696747m);
            bool2x2 r2 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp2x2 a3 = fp2x2(188.76416m, -97.2113953m, -293.320984m, -234.822937m);
            fp2x2 b3 = fp2x2(-494.446655m, -252.970367m, 234.417114m, 398.724m);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp2x2_operator_equal_wide_scalar()
        {
            fp2x2 a0 = fp2x2(65.6712m, 404.415527m, -269.730164m, 83.6306152m);
            fp b0 = (-155.815765m);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp2x2 a1 = fp2x2(152.9945m, 314.671265m, 386.365173m, 290.04895m);
            fp b1 = (-155.868286m);
            bool2x2 r1 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp2x2 a2 = fp2x2(-132.6352m, -69.68326m, -191.190765m, 186.845215m);
            fp b2 = (-65.66748m);
            bool2x2 r2 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp2x2 a3 = fp2x2(-232.895691m, -49.70108m, -300.8819m, 333.396851m);
            fp b3 = (-319.144043m);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp2x2_operator_equal_scalar_wide()
        {
            fp a0 = (36.38391m);
            fp2x2 b0 = fp2x2(-400.4892m, -71.2868347m, 156.978088m, -225.238739m);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp a1 = (499.141785m);
            fp2x2 b1 = fp2x2(-211.979919m, 428.311951m, -489.501343m, -5.691559m);
            bool2x2 r1 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp a2 = (-30.8659363m);
            fp2x2 b2 = fp2x2(-362.9831m, 184.503174m, -160.470612m, 316.668823m);
            bool2x2 r2 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp a3 = (390.369263m);
            fp2x2 b3 = fp2x2(505.1051m, -294.6487m, 443.1991m, 96.5592651m);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp2x2_operator_not_equal_wide_wide()
        {
            fp2x2 a0 = fp2x2(279.994141m, -43.34201m, -465.724731m, 317.466553m);
            fp2x2 b0 = fp2x2(-460.9121m, -476.009033m, 468.1364m, -341.012543m);
            bool2x2 r0 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp2x2 a1 = fp2x2(85.7149658m, 360.8905m, 366.081543m, 154.542847m);
            fp2x2 b1 = fp2x2(-62.65805m, -458.801666m, -457.730225m, -59.5232544m);
            bool2x2 r1 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp2x2 a2 = fp2x2(332.4262m, 397.11322m, -431.374969m, 489.0108m);
            fp2x2 b2 = fp2x2(3.024231m, 155.812744m, -19.8399048m, -6.01693726m);
            bool2x2 r2 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp2x2 a3 = fp2x2(398.4336m, -489.817932m, 171.4049m, -67.82968m);
            fp2x2 b3 = fp2x2(-406.207916m, -102.420715m, -40.362915m, 452.6754m);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void fp2x2_operator_not_equal_wide_scalar()
        {
            fp2x2 a0 = fp2x2(-155.4411m, -19.4266052m, 174.633057m, 507.920715m);
            fp b0 = (-393.413544m);
            bool2x2 r0 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp2x2 a1 = fp2x2(59.177063m, -58.92328m, -398.176849m, 492.20105m);
            fp b1 = (171.151489m);
            bool2x2 r1 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp2x2 a2 = fp2x2(-165.241516m, -380.243256m, 501.899048m, -134.345459m);
            fp b2 = (270.341m);
            bool2x2 r2 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp2x2 a3 = fp2x2(458.400452m, 161.459961m, 261.514221m, -145.6124m);
            fp b3 = (46.7709961m);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void fp2x2_operator_not_equal_scalar_wide()
        {
            fp a0 = (478.353149m);
            fp2x2 b0 = fp2x2(459.553223m, 436.453247m, -488.714172m, 392.767944m);
            bool2x2 r0 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp a1 = (-266.736633m);
            fp2x2 b1 = fp2x2(338.557861m, -338.100128m, -152.314545m, -452.820679m);
            bool2x2 r1 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp a2 = (209.439331m);
            fp2x2 b2 = fp2x2(50.10797m, 372.4344m, -488.0213m, 489.740784m);
            bool2x2 r2 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp a3 = (270.4001m);
            fp2x2 b3 = fp2x2(-472.846771m, -286.850464m, -384.691864m, 443.423523m);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }


    }
}
