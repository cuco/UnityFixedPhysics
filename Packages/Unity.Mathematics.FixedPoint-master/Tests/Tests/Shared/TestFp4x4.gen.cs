//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.FixedPoint.fpmath;
using static Unity.Mathematics.math;

namespace Unity.Mathematics.FixedPoint.Tests
{
    [TestFixture]
    public class TestFp4x4
    {
        [Test]
        public static void fp4x4_zero()
        {
            TestUtils.AreEqual(fp4x4.zero.c0.x, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c0.y, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c0.z, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c0.w, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c1.x, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c1.y, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c1.z, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c1.w, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c2.x, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c2.y, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c2.z, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c2.w, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c3.x, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c3.y, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c3.z, (fp)0);
            TestUtils.AreEqual(fp4x4.zero.c3.w, (fp)0);
        }

        [Test]
        public static void fp4x4_identity()
        {
            TestUtils.AreEqual(fp4x4.identity.c0.x, (fp)1);
            TestUtils.AreEqual(fp4x4.identity.c0.y, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c0.z, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c0.w, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c1.x, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c1.y, (fp)1);
            TestUtils.AreEqual(fp4x4.identity.c1.z, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c1.w, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c2.x, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c2.y, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c2.z, (fp)1);
            TestUtils.AreEqual(fp4x4.identity.c2.w, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c3.x, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c3.y, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c3.z, (fp)0);
            TestUtils.AreEqual(fp4x4.identity.c3.w, (fp)1);
        }

        [Test]
        public static void fp4x4_operator_equal_wide_wide()
        {
            fp4x4 a0 = fp4x4(-135.18924m, -49.0941162m, 169.129822m, 240.8053m, 314.7392m, 442.393m, 177.924438m, 335.5334m, 168.15448m, 350.729553m, 367.178467m, 46.9414673m, 188.76416m, -97.2113953m, -293.320984m, -234.822937m);
            fp4x4 b0 = fp4x4(-220.014648m, 66.98004m, 499.2016m, -371.1131m, 208.448669m, 390.8037m, -72.44382m, 362.97644m, 194.678345m, 471.644836m, -404.044678m, -144.696747m, -494.446655m, -252.970367m, 234.417114m, 398.724m);
            bool4x4 r0 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp4x4 a1 = fp4x4(417.0337m, 26.3864136m, 269.245728m, 29.4741821m, 479.485229m, -237.230957m, -221.9837m, -506.672546m, -22.98944m, 487.260864m, -419.731964m, 337.2033m, 245.043884m, 390.215881m, 84.4129639m, 434.2079m);
            fp4x4 b1 = fp4x4(260.4287m, 370.144226m, 89.579834m, -434.816833m, -109.845337m, 336.973022m, -409.154968m, 500.387573m, -174.081818m, 395.101135m, 350.3393m, -243.144592m, -416.397369m, 151.576477m, -18.2243347m, -431.677917m);
            bool4x4 r1 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp4x4 a2 = fp4x4(-68.7284241m, 485.769958m, 413.169739m, -418.2693m, -346.795868m, 504.159668m, 345.186279m, -434.713043m, -499.7741m, 282.019043m, 259.15625m, 306.455933m, 435.2254m, -386.8997m, 211.364014m, -7.229828m);
            fp4x4 b2 = fp4x4(-468.330963m, 429.495728m, 477.389221m, -433.4254m, 273.5464m, -34.9762268m, 221.968445m, 85.91913m, -85.59894m, 392.7608m, -117.924072m, -445.3056m, -242.468964m, 173.643066m, 389.897766m, -14.2904663m);
            bool4x4 r2 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp4x4 a3 = fp4x4(-32.0532227m, -106.298553m, -382.924957m, -424.7822m, -267.8125m, 229.897034m, 358.1797m, -76.33087m, -493.684326m, 139.350586m, 211.756653m, -178.8342m, -262.786865m, 506.270325m, 352.288879m, -132.7894m);
            fp4x4 b3 = fp4x4(-317.55304m, -265.652771m, -424.168274m, 11.6213379m, 408.686218m, -181.278351m, -139.8205m, -488.924561m, -207.703278m, -341.9881m, -470.552917m, -462.804352m, 419.075562m, 143.638733m, -79.912384m, -224.6936m);
            bool4x4 r3 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp4x4_operator_equal_wide_scalar()
        {
            fp4x4 a0 = fp4x4(65.6712m, 404.415527m, -269.730164m, 83.6306152m, 152.9945m, -155.868286m, 314.671265m, 386.365173m, 290.04895m, -132.6352m, -65.66748m, -69.68326m, -191.190765m, 186.845215m, -232.895691m, -319.144043m);
            fp b0 = (-155.815765m);
            bool4x4 r0 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp4x4 a1 = fp4x4(-49.70108m, 333.396851m, 386.3775m, -296.7019m, -309.1172m, 141.542358m, -227.323334m, 83.87286m, -410.91687m, 110.501282m, -390.103577m, 36.57434m, -427.541443m, -268.170837m, 175.8117m, -193.47995m);
            fp b1 = (-300.8819m);
            bool4x4 r1 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp4x4 a2 = fp4x4(291.051941m, -429.8739m, -275.156952m, -56.3323669m, -95.83597m, -124.865326m, 253.006165m, -300.509521m, 314.866516m, 195.616211m, -26.1289063m, -284.7747m, -242.672058m, 140.3606m, 505.644348m, 506.537964m);
            fp b2 = (423.97168m);
            bool4x4 r2 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp4x4 a3 = fp4x4(-502.3698m, 87.36731m, -433.136383m, -149.626923m, -358.698547m, -249.126862m, 469.5932m, 511.757751m, 51.911377m, 245.630432m, 192.774841m, -162.209167m, 205.5904m, -376.464355m, 270.5208m, -388.2033m);
            fp b3 = (-249.517639m);
            bool4x4 r3 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp4x4_operator_equal_scalar_wide()
        {
            fp a0 = (36.38391m);
            fp4x4 b0 = fp4x4(-400.4892m, -71.2868347m, 156.978088m, -225.238739m, 499.141785m, -211.979919m, 428.311951m, -489.501343m, -5.691559m, -30.8659363m, -362.9831m, 184.503174m, -160.470612m, 316.668823m, 390.369263m, 505.1051m);
            bool4x4 r0 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp a1 = (-294.6487m);
            fp4x4 b1 = fp4x4(443.1991m, 96.5592651m, -257.012939m, -245.054962m, 326.464844m, -23.9599m, -168.694885m, 386.2486m, -227.090637m, -336.612427m, 365.108154m, -405.390839m, -473.995483m, 298.435364m, -149.86322m, 450.0664m);
            bool4x4 r1 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp a2 = (153.47644m);
            fp4x4 b2 = fp4x4(56.28778m, 39.3421021m, -350.403717m, -482.717224m, 239.9654m, -3.40603638m, -1.49484253m, 105.960449m, 151.537537m, 63.2832031m, -289.693176m, 137.553772m, -247.666473m, -339.420563m, 23.2382813m, 21.1778564m);
            bool4x4 r2 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp a3 = (477.03656m);
            fp4x4 b3 = fp4x4(-411.318146m, 122.397095m, -401.49884m, -230.5611m, -214.954041m, 464.6731m, -186.327m, -99.4873352m, 214.232483m, -387.3675m, -448.7962m, 427.889526m, -43.6960449m, 182.698669m, 298.880127m, 246.436829m);
            bool4x4 r3 = bool4x4(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp4x4_operator_not_equal_wide_wide()
        {
            fp4x4 a0 = fp4x4(279.994141m, -43.34201m, -465.724731m, 317.466553m, 85.7149658m, 360.8905m, 366.081543m, 154.542847m, 332.4262m, 397.11322m, -431.374969m, 489.0108m, 398.4336m, -489.817932m, 171.4049m, -67.82968m);
            fp4x4 b0 = fp4x4(-460.9121m, -476.009033m, 468.1364m, -341.012543m, -62.65805m, -458.801666m, -457.730225m, -59.5232544m, 3.024231m, 155.812744m, -19.8399048m, -6.01693726m, -406.207916m, -102.420715m, -40.362915m, 452.6754m);
            bool4x4 r0 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp4x4 a1 = fp4x4(-192.278717m, 227.84082m, 62.1381836m, 262.186462m, -404.0531m, 34.449585m, -204.795776m, -285.4118m, -72.20682m, 444.749268m, 238.81781m, 365.1801m, -437.9229m, -362.442627m, 445.954346m, -0.417480469m);
            fp4x4 b1 = fp4x4(93.25757m, -258.378052m, -184.0498m, -379.2353m, -370.687317m, -255.947235m, 29.0557861m, 322.407654m, 415.071716m, -467.726135m, -433.784668m, -212.165924m, 474.674927m, 452.483215m, -92.11273m, -385.9221m);
            bool4x4 r1 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp4x4 a2 = fp4x4(-506.828369m, 245.477051m, -173.571045m, 390.338562m, 252.837769m, 47.8658447m, 457.7105m, -313.22113m, 391.203857m, 481.786133m, 26.8878174m, -298.1424m, 240.077454m, -332.455139m, -333.607178m, -313.1897m);
            fp4x4 b2 = fp4x4(420.2151m, -239.176056m, -99.0791m, 4.476013m, 264.348572m, 451.312317m, 232.958008m, -142.6222m, -300.2256m, 268.333252m, -112.103546m, -270.494019m, -71.9932251m, 99.46326m, 321.7033m, 200.059631m);
            bool4x4 r2 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp4x4 a3 = fp4x4(141.730164m, -261.118866m, 295.578735m, -16.0213013m, -487.266846m, -208.563873m, 30.3494873m, -157.876465m, 275.896057m, -450.7207m, -61.8988647m, 99.19006m, 206.357483m, 32.74652m, -278.623962m, -173.916809m);
            fp4x4 b3 = fp4x4(-91.62833m, -113.010864m, 465.764221m, -485.127716m, -71.7267761m, 486.469238m, 425.8678m, -158.880951m, 292.179565m, 234.179932m, 243.249329m, 117.275146m, 3.97106934m, 410.42218m, -221.124725m, 443.13446m);
            bool4x4 r3 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void fp4x4_operator_not_equal_wide_scalar()
        {
            fp4x4 a0 = fp4x4(-155.4411m, -19.4266052m, 174.633057m, 507.920715m, 59.177063m, 171.151489m, -58.92328m, -398.176849m, 492.20105m, -165.241516m, 270.341m, -380.243256m, 501.899048m, -134.345459m, 458.400452m, 46.7709961m);
            fp b0 = (-393.413544m);
            bool4x4 r0 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp4x4 a1 = fp4x4(161.459961m, -145.6124m, -0.449920654m, 350.461426m, 202.221008m, 242.664m, 382.677063m, -468.967957m, -497.459473m, -80.93225m, -328.587769m, -506.490326m, 449.348145m, 210.771m, 249.181824m, -338.468536m);
            fp b1 = (261.514221m);
            bool4x4 r1 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp4x4 a2 = fp4x4(229.670654m, 317.286072m, 401.939575m, 210.984863m, -147.096313m, -193.399048m, 207.731384m, 284.3921m, -509.0853m, 414.307617m, -52.2944641m, -140.437927m, -316.787781m, -358.696838m, 312.31897m, 270.629456m);
            fp b2 = (-76.5433044m);
            bool4x4 r2 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp4x4 a3 = fp4x4(-140.016724m, 113.137207m, 479.6996m, 6.097473m, -83.63458m, 249.909363m, 303.956m, 464.888672m, 44.6365356m, -259.91626m, -242.33551m, -403.686523m, -469.1471m, 135.987488m, -490.840759m, 470.225281m);
            fp b3 = (108.910645m);
            bool4x4 r3 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void fp4x4_operator_not_equal_scalar_wide()
        {
            fp a0 = (478.353149m);
            fp4x4 b0 = fp4x4(459.553223m, 436.453247m, -488.714172m, 392.767944m, -266.736633m, 338.557861m, -338.100128m, -152.314545m, -452.820679m, 209.439331m, 50.10797m, 372.4344m, -488.0213m, 489.740784m, 270.4001m, -472.846771m);
            bool4x4 r0 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp a1 = (-286.850464m);
            fp4x4 b1 = fp4x4(-384.691864m, 443.423523m, 358.7472m, -15.4140625m, -342.179169m, 468.967529m, -130.568085m, 401.785828m, -268.352264m, -239.231018m, 411.386536m, 139.769348m, 334.522034m, -223.629242m, -12.4884644m, 113.468872m);
            bool4x4 r1 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp a2 = (-189.652252m);
            fp4x4 b2 = fp4x4(-212.846558m, 306.1256m, -178.330383m, 382.141968m, -340.8656m, -17.58023m, -409.874847m, -349.70166m, 275.8543m, -229.371948m, -127.505737m, 90.75342m, -422.087128m, -2.44754028m, -280.5517m, -484.374359m);
            bool4x4 r2 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp a3 = (-33.7634277m);
            fp4x4 b3 = fp4x4(374.593872m, 437.092346m, 286.22583m, -18.2327881m, 289.732361m, 479.485718m, 153.853943m, 502.982117m, -510.3844m, 65.78888m, -237.4867m, 219.916138m, -275.342743m, -78.93146m, -449.403564m, -253.034515m);
            bool4x4 r3 = bool4x4(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }


    }
}
