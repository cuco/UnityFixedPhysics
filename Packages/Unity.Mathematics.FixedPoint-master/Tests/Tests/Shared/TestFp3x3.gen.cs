//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.FixedPoint.fpmath;
using static Unity.Mathematics.math;

namespace Unity.Mathematics.FixedPoint.Tests
{
    [TestFixture]
    public class TestFp3x3
    {
        [Test]
        public static void fp3x3_zero()
        {
            TestUtils.AreEqual(fp3x3.zero.c0.x, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c0.y, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c0.z, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c1.x, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c1.y, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c1.z, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c2.x, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c2.y, (fp)0);
            TestUtils.AreEqual(fp3x3.zero.c2.z, (fp)0);
        }

        [Test]
        public static void fp3x3_identity()
        {
            TestUtils.AreEqual(fp3x3.identity.c0.x, (fp)1);
            TestUtils.AreEqual(fp3x3.identity.c0.y, (fp)0);
            TestUtils.AreEqual(fp3x3.identity.c0.z, (fp)0);
            TestUtils.AreEqual(fp3x3.identity.c1.x, (fp)0);
            TestUtils.AreEqual(fp3x3.identity.c1.y, (fp)1);
            TestUtils.AreEqual(fp3x3.identity.c1.z, (fp)0);
            TestUtils.AreEqual(fp3x3.identity.c2.x, (fp)0);
            TestUtils.AreEqual(fp3x3.identity.c2.y, (fp)0);
            TestUtils.AreEqual(fp3x3.identity.c2.z, (fp)1);
        }

        [Test]
        public static void fp3x3_operator_equal_wide_wide()
        {
            fp3x3 a0 = fp3x3(-135.18924m, -49.0941162m, 169.129822m, 240.8053m, 314.7392m, 442.393m, 177.924438m, 335.5334m, 168.15448m);
            fp3x3 b0 = fp3x3(-220.014648m, 66.98004m, 499.2016m, -371.1131m, 208.448669m, 390.8037m, -72.44382m, 362.97644m, 194.678345m);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp3x3 a1 = fp3x3(350.729553m, 367.178467m, 46.9414673m, 188.76416m, -97.2113953m, -293.320984m, -234.822937m, 417.0337m, 26.3864136m);
            fp3x3 b1 = fp3x3(471.644836m, -404.044678m, -144.696747m, -494.446655m, -252.970367m, 234.417114m, 398.724m, 260.4287m, 370.144226m);
            bool3x3 r1 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp3x3 a2 = fp3x3(269.245728m, 29.4741821m, 479.485229m, -237.230957m, -221.9837m, -506.672546m, -22.98944m, 487.260864m, -419.731964m);
            fp3x3 b2 = fp3x3(89.579834m, -434.816833m, -109.845337m, 336.973022m, -409.154968m, 500.387573m, -174.081818m, 395.101135m, 350.3393m);
            bool3x3 r2 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp3x3 a3 = fp3x3(337.2033m, 245.043884m, 390.215881m, 84.4129639m, 434.2079m, -68.7284241m, 485.769958m, 413.169739m, -418.2693m);
            fp3x3 b3 = fp3x3(-243.144592m, -416.397369m, 151.576477m, -18.2243347m, -431.677917m, -468.330963m, 429.495728m, 477.389221m, -433.4254m);
            bool3x3 r3 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp3x3_operator_equal_wide_scalar()
        {
            fp3x3 a0 = fp3x3(65.6712m, 404.415527m, -269.730164m, 83.6306152m, 152.9945m, -155.868286m, 314.671265m, 386.365173m, 290.04895m);
            fp b0 = (-155.815765m);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp3x3 a1 = fp3x3(-132.6352m, -69.68326m, -191.190765m, 186.845215m, -232.895691m, -319.144043m, -49.70108m, -300.8819m, 333.396851m);
            fp b1 = (-65.66748m);
            bool3x3 r1 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp3x3 a2 = fp3x3(386.3775m, -309.1172m, 141.542358m, -227.323334m, 83.87286m, -410.91687m, 110.501282m, -390.103577m, 36.57434m);
            fp b2 = (-296.7019m);
            bool3x3 r2 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp3x3 a3 = fp3x3(-427.541443m, 175.8117m, -193.47995m, 291.051941m, 423.97168m, -429.8739m, -275.156952m, -56.3323669m, -95.83597m);
            fp b3 = (-268.170837m);
            bool3x3 r3 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp3x3_operator_equal_scalar_wide()
        {
            fp a0 = (36.38391m);
            fp3x3 b0 = fp3x3(-400.4892m, -71.2868347m, 156.978088m, -225.238739m, 499.141785m, -211.979919m, 428.311951m, -489.501343m, -5.691559m);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            fp a1 = (-30.8659363m);
            fp3x3 b1 = fp3x3(-362.9831m, 184.503174m, -160.470612m, 316.668823m, 390.369263m, 505.1051m, -294.6487m, 443.1991m, 96.5592651m);
            bool3x3 r1 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            fp a2 = (-257.012939m);
            fp3x3 b2 = fp3x3(-245.054962m, 326.464844m, -23.9599m, -168.694885m, 386.2486m, -227.090637m, -336.612427m, 365.108154m, -405.390839m);
            bool3x3 r2 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            fp a3 = (-473.995483m);
            fp3x3 b3 = fp3x3(298.435364m, -149.86322m, 450.0664m, 153.47644m, 56.28778m, 39.3421021m, -350.403717m, -482.717224m, 239.9654m);
            bool3x3 r3 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void fp3x3_operator_not_equal_wide_wide()
        {
            fp3x3 a0 = fp3x3(279.994141m, -43.34201m, -465.724731m, 317.466553m, 85.7149658m, 360.8905m, 366.081543m, 154.542847m, 332.4262m);
            fp3x3 b0 = fp3x3(-460.9121m, -476.009033m, 468.1364m, -341.012543m, -62.65805m, -458.801666m, -457.730225m, -59.5232544m, 3.024231m);
            bool3x3 r0 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp3x3 a1 = fp3x3(397.11322m, -431.374969m, 489.0108m, 398.4336m, -489.817932m, 171.4049m, -67.82968m, -192.278717m, 227.84082m);
            fp3x3 b1 = fp3x3(155.812744m, -19.8399048m, -6.01693726m, -406.207916m, -102.420715m, -40.362915m, 452.6754m, 93.25757m, -258.378052m);
            bool3x3 r1 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp3x3 a2 = fp3x3(62.1381836m, 262.186462m, -404.0531m, 34.449585m, -204.795776m, -285.4118m, -72.20682m, 444.749268m, 238.81781m);
            fp3x3 b2 = fp3x3(-184.0498m, -379.2353m, -370.687317m, -255.947235m, 29.0557861m, 322.407654m, 415.071716m, -467.726135m, -433.784668m);
            bool3x3 r2 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp3x3 a3 = fp3x3(365.1801m, -437.9229m, -362.442627m, 445.954346m, -0.417480469m, -506.828369m, 245.477051m, -173.571045m, 390.338562m);
            fp3x3 b3 = fp3x3(-212.165924m, 474.674927m, 452.483215m, -92.11273m, -385.9221m, 420.2151m, -239.176056m, -99.0791m, 4.476013m);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void fp3x3_operator_not_equal_wide_scalar()
        {
            fp3x3 a0 = fp3x3(-155.4411m, -19.4266052m, 174.633057m, 507.920715m, 59.177063m, 171.151489m, -58.92328m, -398.176849m, 492.20105m);
            fp b0 = (-393.413544m);
            bool3x3 r0 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp3x3 a1 = fp3x3(-165.241516m, -380.243256m, 501.899048m, -134.345459m, 458.400452m, 46.7709961m, 161.459961m, 261.514221m, -145.6124m);
            fp b1 = (270.341m);
            bool3x3 r1 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp3x3 a2 = fp3x3(-0.449920654m, 202.221008m, 242.664m, 382.677063m, -468.967957m, -497.459473m, -80.93225m, -328.587769m, -506.490326m);
            fp b2 = (350.461426m);
            bool3x3 r2 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp3x3 a3 = fp3x3(449.348145m, 249.181824m, -338.468536m, 229.670654m, -76.5433044m, 317.286072m, 401.939575m, 210.984863m, -147.096313m);
            fp b3 = (210.771m);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void fp3x3_operator_not_equal_scalar_wide()
        {
            fp a0 = (478.353149m);
            fp3x3 b0 = fp3x3(459.553223m, 436.453247m, -488.714172m, 392.767944m, -266.736633m, 338.557861m, -338.100128m, -152.314545m, -452.820679m);
            bool3x3 r0 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            fp a1 = (209.439331m);
            fp3x3 b1 = fp3x3(50.10797m, 372.4344m, -488.0213m, 489.740784m, 270.4001m, -472.846771m, -286.850464m, -384.691864m, 443.423523m);
            bool3x3 r1 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            fp a2 = (358.7472m);
            fp3x3 b2 = fp3x3(-15.4140625m, -342.179169m, 468.967529m, -130.568085m, 401.785828m, -268.352264m, -239.231018m, 411.386536m, 139.769348m);
            bool3x3 r2 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            fp a3 = (334.522034m);
            fp3x3 b3 = fp3x3(-223.629242m, -12.4884644m, 113.468872m, -189.652252m, -212.846558m, 306.1256m, -178.330383m, 382.141968m, -340.8656m);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }


    }
}
